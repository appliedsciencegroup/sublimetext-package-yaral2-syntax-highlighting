%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions: [yaral]
scope: source.yaral
first_line_match: ^(\bglobal\b|\bprivate\b)?\s\brule\b\s[a-zA-z0-9]*(\s\:[\sa-zA-z0-9]*)?(\n{|\s*{)

###############################################################################

###############################################################################

variables:
  # Reserved keywords
  # https://docs.oracle.com/javase/specs/jls/se13/html/jls-3.html#jls-3.9
  reserved_words: |-
    (?x:
      {{keywords}}
    | {{storage_types}}
    | {{storage_modifiers}}
    | {{constants}}
    | {{variables}}
    )
  newline: (?:\n|$)
  keywords: |-
    (?x:
      {{declaration_keywords}}
    | {{control_keywords}}
    | {{operator_keywords}}
    | {{illegal_keywords}}
    )
  declaration_keywords: |-
    (?x: rule | over | class | enum | @?interface | record | var | void | extends | implements | import | package )
  control_keywords: |-
    (?x: over | assert | break | case | catch | continue | do | else | finally | for
    | if | return | switch | throw | throws | try | while | yield )
  operator_keywords: |-
    (?x: new | instanceof | )
  illegal_keywords: |-
    (?x: const | goto )

  # Storage Modifiers
  storage_modifiers: |-
    (?x:
      {{class_modifier}}
    | {{class_no_modifier}}
    )
  # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.1.1
  class_modifier: |-
    (?x: public | protected | private | abstract | final | sealed | static | strictfp )
  class_no_modifier: |-
    (?x: default | native | synchronized | transient | volatile )
  # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.8
  constructor_modifier: |-
    (?x: public | protected | private )
  constructor_no_modifier: |-
    (?x: abstract | default | final | native | sealed | static | strictfp | synchronized | transient | volatile )
  # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.3.1
  field_modifier: |-
    (?x: public | protected | private | final | static | transient | volatile )
  field_no_modifier: |-
    (?x: abstract | default | native | sealed | strictfp | synchronized )
  # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-9.1.1
  interface_modifier: |-
    (?x: public | protected | private | abstract | sealed | static | strictfp )
  interface_no_modifier: |-
    (?x: default | final | native | synchronized | transient | volatile )
  # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.4.3
  # https://docs.oracle.com/javase/specs/jls/se13/html/jls-9.html#jls-9.4
  method_modifier: |-
    (?x: public | protected | private | abstract | default | final | native | static | strictfp | synchronized )
  method_no_modifier: |-
    (?x: sealed | transient | volatile )
  definitions: |-
    (?x: meta|events|match|outcome|condition|options )

  # Storage Types
  storage_types: |-
    (?x: boolean | byte | char | short | int | float | long | double )

  # Literals
  constants: |-
    (?x: false | null | true )
  variables: |-
    (?x: _ | super | this )

  # Identifiers
  break: (?!{{id_char}})

  identifier: (?!{{reserved_words}}[^{{id_char}}]){{id}}

  id: (?:{{id_first_char}}{{id_char}}*)
  id_first_char: '[\p{L}_$#]'
  id_char: '[\p{L}\p{N}_.$]'

  classcase_id: (?:\p{Lu}{{id_char}}*)
  lowercase_id: (?:[_$]*\p{Ll}[\p{Ll}\p{N}_$]*{{break}})
  uppercase_id: (?:[_$]*\p{Lu}[\p{Lu}\p{N}_$]*{{break}})

  # digits
  time_digit: '[smdyh]'
  bin_digit: '[01_]'
  oct_digit: '[0-7_]'
  dec_digit: '[\d_]'
  hex_digit: '[\h_]'
  dec_exponent: '[eE][-+]?{{dec_digit}}*'
  hex_exponent: '[pP][-+]?{{dec_digit}}*'
  float_suffix: '[dDfF]{{break}}'
  int_suffix: '[lL]{{break}}'

  escape_octal: \\[0-3]?[0-7]{1,2}
  escape_other: \\[btnfr"'\\]
  escape_unicode: \\u+\h{4}

  # accessor but no variadic operator
  single_dot: \.(?!\.)

###############################################################################

contexts:
  main:
    - meta_include_prototype: false
    - match: ''
      push: [yaral]
  yaral:
    - match: '"'
      scope: punctuation.definition.string.begin.yaral
      push: double_quoted_string

    # - match: '//'
    #   scope: punctuation.definition.comment.yaral
    #   push: line_comment

    - match: '/$'
      scope: support.function.builtin.yaral

    - match: '#'
      scope: support.function.builtin.yaral

    - match: '/\*'
      scope: punctuation.definition.block.comment.begin.yaral
      push: block_comment

    - match: '\b(import|include)\b'
      scope: keyword.control.import.yaral

    - match: '\b(int8|int16|int32|int8be|int16be|int32be|uint16|uint32|uint8be|uint16be|uint32be)\b'
      scope: keyword.declaration.type.yaral

    - match: '\b(rule)\b'
      scope: constant.language.yaral
      set: 
        - rule
        - rule-name
    - match: '\b(global|private|ascii|base64|base64wide|nocase|wide|xor|fullword)\b'
      scope: support.type.yaral

    - match: '\b(all|any|at|contains|entrypoint|false|filesize|for|in|matches|of|them|true)\b'
      scope: entity.name.yaral

    - match: '\b(and|or|not)\b'
      scope: keyword.control.conditional.yaral

    - match: '=\s*{'
      scope: definition.constant.numeric.begin.yaral
      push: constant

    - match: '=\s*/'
      scope: punctuation.definition.regex.begin.yaral
      push: regex

  double_quoted_string:
    - meta_content_scope: punctuation.definition.yaral
    - match: '\\.'
      scope: constant.character.escape.yaral
    - match: '"($|\s*)'
      scope: punctuation.definition.string.end.yaral
      pop: true

  # line_comment:
  #   - meta_scope: comment.line.yaral
  #   - match: $
  #     pop: true

  block_comment:
    - meta_scope: comment.block.yaral
    - match: '\*/'
      scope: punctuation.definition.block.comment.end.yaral
      pop: true

  # constant:
  #   - meta_content_scope: constant.numeric.yaral
  #   - match: '(\(|\)|\|)'
  #     scope: constant.numeric.escape.yaral
  #   - match: '}'
  #     scope: definition.constant.numeric.end.yaral
  #     pop: true

  regex:
    - meta_content_scope: markup.raw.inline.yaral
    - match: '/'
      scope: punctuation.definition.regex.end.yaral
      pop: true
###[ MAIN DECLARATIONS ]######################################################
  rule:
    - match: '\{'
      scope: punctuation.section.block.begin
    - match: '(meta|\s*)(\:)'
      scope: 
        storage.type.struct 
        entity.name.yaral
      push: meta-body
    - match: '(events|match|outcome|strings|condition|\s*)(\:)'
      scope: 
        storage.type.struct 
        entity.name.yaral
      push: main-body
    - match: '\}'
      scope: punctuation.section.block.end
      pop: 1
###[ META DECLARATIONS ]######################################################
  meta-body:
  - match: '(\s*)(events|match|outcome|strings|condition)(\:)'
    scope: 
        storage.type.struct 
        entity.name.yaral
    pop: 1
  - match: ''
    branch_point: meta-open-body
    branch:
      - meta-empty-line
      - meta-body-content
  meta-empty-line:
  - match: (\s*)(//)([\s\S]*)
    scope: comment.line.double-slash.yaral
    pop: 1
  - match: ^([\t ]*)(\s*)(\S+)
    fail: meta-open-body
  - match: ($|\n)
    scope: meta.other.yaral
    pop: 1
  meta-body-content:
  - match: ^([\t ]*)(\s*)
    captures:
      1: meta.indent
      2: markup.raw.inline.yaral
    embed: meta-parameters-body
    embed_scope: meta.block.yaral
    escape: ^(?!\1\2)(?!$)(?!\s*$)(?!\s*//)
    pop: 2
  meta-parameters-body:
    - meta_scope: meta.annotation.parameters.yaral meta.group.yaral
    - include: group-end
    - match: (?={{id_first_char}})
      branch_point: meta-parameter
      branch:
        - meta-parameter
        - expression
    - include: variable-initializers

  meta-parameter:
    - match: '{{identifier}}'
      scope: punctuation.accessor.yaral
      set: meta-parameter-assignment
    - match: ''
      fail: meta-parameter

  meta-parameter-assignment:
    - match: =
      scope: keyword.operator.assignment.yaral
      set: variable-initializer
    - match: (?=\S)
      fail: meta-parameter
###[ EVENTS/MATCH/OUTCOME/CONDITION DECLARATIONS ]######################################################
  main-body:
  - match: ''
    branch_point: open_rules
    branch:
      - empty-line
      - body
  empty-line:
  - match: (\s*)(//)([\s\S]*)
    scope: comment.line.double-slash.yaral
    pop: 1
  - match: ^([\t ]*)(\s*)(\S+)
    fail: open_rules
  - match: ($|\n)
    scope: xxxx
    pop: 1
  body:
  - match: '(\s*)(events|match|outcome|strings|condition)(\:)'
    scope: 
        storage.type.struct 
        orange2
    pop: 1
  - match: ^([\t ]*)(\s*)
    captures:
      1: meta.indent
      2: markup.raw.inline.yaral
    embed: annotation-parameters-body
    embed_scope: meta.block.yaral
    escape: ^(?!\1\2)(?!$)(?!\s*$)(?!\s*//)
    pop: 2

  rule-body:
    - match: (meta|events|match|outcome|condition)
      scope: content
      pop: true
  rule-name:
    - match: '{{identifier}}'
      scope: entity.name.yaral
      pop: 1
    - include: else-pop

  java:
    # - include: import
    # - include: module
    # - include: package
    # - include: declarations
    # - include: definition_declarations
    # - include: statements
    # - include: else-expressions
    - include: yaral

  statements:
    - include: member-statements
    - include: synchronized-statements

  member-statements:
    - include: punctuation-terminator-semicolon
    - include: blocks
    - include: stray-group
    - include: flow-control-statements
    - include: if-else-statements
    - include: switch-case-statements
    - include: do-while-statements
    - include: for-statements
    - include: try-catch-statements
    - include: labeled-statements

  expressions:
    - include: groups
    - include: literals
    - include: punctuations
    - include: lambdas
    - include: operators
    - include: instantiations
    - include: primitive-types
    - include: var-types
    - include: array-modifiers
    - include: storage-modifiers
    - include: object-types
    - include: variables
###[ FUNCTIONS ]###############################################################

###[ COMMENTS ]################################################################

  comments:
    - include: line-comments
    - include: block-comments

  block-comments:
    # empty block comments
    - match: /\*\*+/
      scope: comment.block.empty.yaral punctuation.definition.comment.yaral
    # documentation block comments
    - match: /\*\*+
      scope:
        comment.block.documentation.yaral
        punctuation.definition.comment.begin.yaral
      embed: Packages/Java/JavaDoc.sublime-syntax#javadoc
      embed_scope: comment.block.documentation.yaral
      escape: \*+/
      escape_captures:
        0: comment.block.documentation.yaral
           punctuation.definition.comment.end.yaral
    # normal block comments
    - match: /\*
      scope: punctuation.definition.comment.begin.yaral
      push: block-comment-body

  block-comment-body:
    - meta_include_prototype: false
    - meta_scope: comment.block.yaral
    - match: \*+/
      scope: punctuation.definition.comment.end.yaral
      pop: 1
    - match: ^\s*(\*)(?![*/])
      scope: punctuation.definition.comment.yaral

  line-comments:
    - match: //+
      scope: punctuation.definition.comment.yaral
      push: line-comment-body

  line-comment-body:
    - meta_include_prototype: false
    - meta_scope: comment.line.double-slash.yaral
    - match: (//+)?\n
      captures:
        1: punctuation.definition.comment.yaral
      pop: 1

  shebang:
    - meta_include_prototype: false
    - match: ^\#!
      scope: punctuation.definition.comment.yaral
      set: shebang-body
    - match: ^|(?=\S)  # Note: Ensure to highlight shebang if Erlang is embedded.
      pop: 1

  shebang-body:
    - meta_include_prototype: false
    - meta_scope: comment.line.shebang.yaral
    # Note: Keep sync with first_line_match!
    - match: \b(bsh|java)\b
      scope: constant.language.shebang.yaral
    - match: \n
      pop: 1

###[ ANNOTATIONS ]#############################################################

  annotations:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-9.html#jls-9.7
    - match: \@(?!interface{{break}})
      scope: punctuation.definition.annotation.yaral
      branch_point: annotation-identifier
      branch:
        - annotation-unqualified-identifier
        - annotation-qualified-identifier

  annotation-unqualified-identifier:
    - meta_scope: meta.annotation.identifier.yaral
    - match: '{{identifier}}'
      scope: variable.annotation.yaral
      branch_point: annotation-unqualified-parameters
      branch:
        - annotation-unqualified-parameters
        - immediately-pop2
    - include: else-pop

  annotation-unqualified-parameters:
    - match: \(
      scope: punctuation.section.group.begin.yaral
      pop: 2
      push: annotation-parameters-body
    # fail: looks like a qualified annotation
    - match: (?={{single_dot}})
      fail: annotation-identifier
    # fail: truncate meta scope immediatelly
    - match: (?=\S)
      fail: annotation-unqualified-parameters

  annotation-qualified-identifier:
    - meta_include_prototype: false
    - meta_scope: meta.annotation.identifier.yaral meta.path.yaral
    - match: ''
      branch_point: annotation-qualified-identifier
      branch:
        - annotation-qualified-identifier-path
        - annotation-qualified-identifier-name

  annotation-qualified-identifier-path:
    - match: '{{identifier}}'
      scope: variable.namespace.yaral
      set: annotation-qualified-identifier-accessor
    - include: else-pop2

  annotation-qualified-identifier-accessor:
    - include: punctuation-accessor-dot-pop
    - match: (?=\S)
      fail: annotation-qualified-identifier

  annotation-qualified-identifier-name:
    - match: '{{identifier}}'
      scope:
        meta.annotation.identifier.yaral meta.path.yaral
        variable.annotation.yaral
      pop: 2
      branch_point: annotation-qualified-parameters
      branch:
        - annotation-qualified-parameters
        - immediately-pop
    - include: else-pop2

  annotation-qualified-parameters:
    - meta_content_scope: meta.annotation.identifier.yaral
    - match: \(
      scope: punctuation.section.group.begin.yaral
      set: annotation-parameters-body
    - match: (?=\S)
      fail: annotation-qualified-parameters

  annotation-parameters-body:
    - meta_scope: meta.annotation.parameters.yaral meta.group.yaral
    - include: group-end
    - match: (?={{id_first_char}})
      branch_point: annotation-parameter
      branch:
        - annotation-parameter
        - expression
    - include: variable-initializers

  annotation-parameter:
    - match: '{{identifier}}'
      scope: punctuation.section.yaral
      set: annotation-parameter-assignment
    - match: ''
      fail: annotation-parameter

  annotation-parameter-assignment:
    - match: =
      scope: keyword.operator.assignment.yaral
      set: variable-initializer
    - match: (?=\S)
      fail: annotation-parameter

###[ DECLARATIONS ]############################################################
  definition_declarations:
    # As per specification separate declarations for globals, members, and
    # locals are needed, as each of them supports only a subset of declaration
    # statements:
    #   - globals: class, enum, interface
    #   - members: class, enum, interface, constructor, field, method
    #   - locals:  class, variables
    #   - try/for: variables
    #
    # Member declarations need to be handled differently as constructurs look
    # exactly like function calls. The other two scopes (global, local) are
    # merged here to maintain syntax highlighting whenever possible. That's
    # needed for `incomplete code` scenarios or if contexts are lost due to
    # embedding Java into JSP.  meta|events|match|outcome|condition|options
    - match: '{{definitions}}'
      branch_point: definition_declarations
      branch:
        - declaration-maybe-meta
        - declaration-maybe-events
  declaration-maybe-meta:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.1
    - meta_scope: meta.class.yaral
    - include: class-keyword
    - include: record-keyword
    - include: class-modifiers
    - include: declaration-else-fail
  declaration-maybe-events:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.1
    - meta_scope: meta.class.yaral
    - include: class-keyword
    - include: record-keyword
    - include: class-modifiers
    - include: declaration-else-fail

  declarations:
    # As per specification separate declarations for globals, members, and
    # locals are needed, as each of them supports only a subset of declaration
    # statements:
    #   - globals: class, enum, interface
    #   - members: class, enum, interface, constructor, field, method
    #   - locals:  class, variables
    #   - try/for: variables
    #
    # Member declarations need to be handled differently as constructurs look
    # exactly like function calls. The other two scopes (global, local) are
    # merged here to maintain syntax highlighting whenever possible. That's
    # needed for `incomplete code` scenarios or if contexts are lost due to
    # embedding Java into JSP.
    - match: (?=[{{id_first_char}}@<])
      branch_point: declarations
      branch:
        - declaration-maybe-class
        - declaration-maybe-enum
        - declaration-maybe-interface
        - declaration-maybe-variable
        - declaration-maybe-method

  declaration-else-fail:
    - match: (?=\S)
      fail: declarations

  declaration-maybe-class:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.1
    - meta_scope: meta.class.yaral
    - include: class-keyword
    - include: record-keyword
    - include: class-modifiers
    - include: declaration-else-fail

  declaration-maybe-enum:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.9
    # Note: Local enum declarations are not valid,
    #       but may help maintaining highlighting in incomplete code.
    - meta_scope: meta.enum.yaral
    - include: enum-keyword
    - include: class-modifiers
    - include: declaration-else-fail

  declaration-maybe-interface:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-9.html#jls-9.1
    # Note: Local interface declarations are not valid,
    #       but may help maintaining highlighting in incomplete code.
    - meta_scope: meta.interface.yaral
    - include: interface-keyword
    - include: interface-modifiers
    - include: declaration-else-fail

  declaration-maybe-method:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.4
    - meta_include_prototype: false
    - match: ''
      set:
        - method-block
        - method-attributes
        - method-array-modifiers
        - declaration-method-signature
        - method-modifier

  declaration-method-signature:
    - include: method-void-signature
    - match: (?=\S)
      set:
        - declaration-method-expect-parameters
        - declaration-method-expect-identifier
        - method-result-modifier
        - method-result-type

  declaration-method-expect-identifier:
    - include: method-identifier
    - include: declaration-else-fail

  declaration-method-expect-parameters:
    - meta_content_scope: meta.function.identifier.yaral
    - include: method-parameters
    - include: declaration-else-fail

  declaration-maybe-variable:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-14.html#jls-14.4
    - meta_include_prototype: false
    - match: ''
      set:
        - variable-declaration-list
        - variable-declaration-value-assignment
        - variable-declaration-expect-identifier
        - variable-declaration-type-modifier
        - variable-declaration-type

###[ PACKAGE DECLARATIONS ]####################################################

  package:
    - match: package{{break}}
      scope: keyword.declaration.namespace.package.yaral
      push:
        - meta_scope: meta.namespace.package.yaral
        - match: (?=\S)
          set: package-identifier

  package-identifier:
    - meta_include_prototype: false
    - meta_content_scope: meta.namespace.package.identifier.yaral
    - include: entity-package
    - include: immediately-pop

###[ MODULE DECLARATIONS ]#####################################################

  module:
    - match: (?:(open)\s+)?(module){{break}}
      captures:
        1: storage.modifier.yaral
        2: keyword.declaration.namespace.module.yaral
      push:
        - meta_scope: meta.namespace.module.yaral
        - match: (?=\S)
          set:
            - module-block
            - module-identifier

  module-identifier:
    - meta_include_prototype: false
    - include: entity-module
    - include: immediately-pop

  module-block:
    - meta_content_scope: meta.namespace.module.identifier.yaral
    - match: \{
      scope: punctuation.section.block.begin.yaral
      set: module-block-body
    - include: else-pop

  module-block-body:
    - meta_scope: meta.namespace.module.yaral meta.block.yaral
    - include: block-end
    - include: punctuation-terminator-semicolon
    - match: exports{{break}}
      scope: keyword.other.module.exports.yaral
      push:
        - module-exports-meta
        - module-exports-or-opens-body
    - match: opens{{break}}
      scope: keyword.other.module.opens.yaral
      push:
        - module-opens-meta
        - module-exports-or-opens-body
    - match: requires{{break}}
      scope: keyword.other.module.requires.yaral
      push: module-requires-body
    - match: uses{{break}}
      scope: keyword.other.module.uses.yaral
      push:
        - module-uses-meta
        - module-provides-or-uses-body
    - match: provides{{break}}
      scope: keyword.other.module.provides.yaral
      push:
        - module-provides-meta
        - module-provides-or-uses-body

  module-exports-meta:
    - meta_include_prototype: false
    - meta_scope: meta.exports.yaral
    - include: immediately-pop

  module-opens-meta:
    - meta_include_prototype: false
    - meta_scope: meta.opens.yaral
    - include: immediately-pop

  module-exports-or-opens-body:
    - include: module-statement-terminator
    - match: to{{break}}
      scope: keyword.other.module.to.yaral
      set:
        - include: module-statement-terminator
        - include: punctuation-separator-comma
        - include: entity-module
    - include: entity-package

  module-requires-body:
    - meta_scope: meta.requires.yaral
    - match: transitive{{break}}
      scope: keyword.other.module.transitive.yaral
    - include: module-statement-terminator
    - include: entity-module

  module-uses-meta:
    - meta_include_prototype: false
    - meta_scope: meta.uses.yaral
    - include: immediately-pop

  module-provides-meta:
    - meta_include_prototype: false
    - meta_scope: meta.provides.yaral
    - include: immediately-pop

  module-provides-or-uses-body:
    - include: module-statement-terminator
    - match: with{{break}}
      scope: keyword.other.module.with.yaral
      set:
        - include: module-statement-terminator
        - include: punctuation-separator-comma
        - include: entity-class
    - include: entity-class

  module-statement-terminator:
    - match: (?=[;}]|(?:exports|opens|requires|provides|uses|{{reserved_words}}){{break}})
      pop: 1

###[ IMPORT DECLARATIONS ]#####################################################

  import:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-7.html#jls-7.5
    - match: import{{break}}
      scope: keyword.declaration.import.yaral
      push:
        - import-meta
        - import-modifier

  import-meta:
    - meta_include_prototype: false
    - meta_scope: meta.import.yaral
    - include: immediately-pop

  import-modifier:
    - match: static{{break}}
      scope: storage.modifier.yaral
      set: import-static
    - match: (?=\S)
      set: type-import

  import-static:
    - match: (?=\S)
      set: static-import

  import-wildcard:
    - match: \*
      scope: variable.language.wildcard.asterisk.yaral
      pop: 2
      set: import-expect-terminator

  import-expect-terminator:
    - match: (?=\s*;|{{reserved_words}}{{break}})
      pop: 1
    - match: \S
      scope: invalid.illegal.expect-semicolon.yaral

###[ CLASS DECLARATIONS ]######################################################

  class-keyword:
    - match: (class|rule){{break}}
      scope: keyword.declaration.class.yaral
      set:
        - class-block
        - class-extends
        - class-name-meta
        - maybe-type-parameter
        - class-name

  class-modifiers:
    - match: '{{class_modifier}}{{break}}'
      scope: storage.modifier.yaral
    - match: '{{class_no_modifier}}{{break}}'
      scope: invalid.illegal.unexpected-keyword.yaral
    - include: annotations

  class-name:
    - match: '{{identifier}}'
      scope: entity.name.class.yaral
      pop: 1
    - include: else-pop

  class-name-meta:
    - meta_content_scope: meta.class.identifier.yaral
    - include: else-pop

  class-extends:
    - match: extends{{break}}
      scope: storage.modifier.extends.yaral
      push:
        - class-extends-object-type-list
        - inherited-object-type
    - match: implements{{break}}
      scope: storage.modifier.implements.yaral
      push:
        - class-implements-object-type-list
        - inherited-object-type
    - match: permits{{break}}
      scope: storage.modifier.permits.yaral
      push:
        - class-permits-object-type-list
        - inherited-object-type
    - include: else-pop

  class-extends-object-type-list:
    - meta_scope: meta.class.extends.yaral
    - include: inherited-object-type-list
    - include: else-pop

  class-implements-object-type-list:
    - meta_scope: meta.class.implements.yaral
    - include: inherited-object-type-list
    - include: else-pop

  class-permits-object-type-list:
    - meta_scope: meta.class.permits.yaral
    - include: inherited-object-type-list
    - include: else-pop

  class-block:
    - match: \{
      scope: punctuation.section.block.begin.yaral
      set: class-block-body
    - include: else-pop

  class-block-body:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.1.6
    - meta_scope: meta.class.yaral meta.block.yaral
    - include: block-end
    - include: member-declarations
    - include: member-statements
    - include: else-expressions


###[ ENUM DECLARATIONS ]#######################################################

  enum-keyword:
    - match: enum{{break}}
      scope: keyword.declaration.enum.yaral
      set:
        - enum-block
        - enum-extends
        - enum-name-meta
        - maybe-illegal-type-parameter
        - enum-name

  enum-name:
    - match: '{{identifier}}'
      scope: entity.name.enum.yaral
      pop: 1
    - include: else-pop

  enum-name-meta:
    - meta_content_scope: meta.enum.identifier.yaral
    - include: else-pop

  enum-extends:
    - match: extends{{break}}
      scope: invalid.illegal.unexpected-keyword.yaral
      push:
        - enum-extends-object-type-list
        - inherited-object-type
    - match: implements{{break}}
      scope: storage.modifier.implements.yaral
      push:
        - enum-implements-object-type-list
        - inherited-object-type
    - match: permits{{break}}
      scope: invalid.illegal.unexpected-keyword.yaral
      push:
        - enum-permits-object-type-list
        - inherited-object-type
    - include: else-pop

  enum-extends-object-type-list:
    - meta_scope: meta.enum.extends.yaral
    - include: inherited-object-type-list
    - include: else-pop

  enum-implements-object-type-list:
    - meta_scope: meta.enum.implements.yaral
    - include: inherited-object-type-list
    - include: else-pop

  enum-permits-object-type-list:
    - meta_scope: meta.enum.permits.yaral
    - include: inherited-object-type-list
    - include: else-pop

  enum-block:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.9.1
    - match: \{
      scope: punctuation.section.block.begin.yaral
      set:
        - enum-block-body
        - enum-constants-list
    - include: else-pop

  enum-block-body:
    - meta_scope: meta.enum.yaral meta.block.yaral
    - include: class-block-body

  enum-constants-list:
    - meta_content_scope: meta.sequence.constants.yaral
    - match: '{{identifier}}'
      scope: meta.constant.identifier.yaral entity.name.constant.yaral
      push: enum-constant-arguments
    - include: punctuation-separator-comma
    - include: else-pop

  enum-constant-arguments:
    - meta_content_scope: meta.constant.identifier.yaral
    - match: \(
      scope: punctuation.section.group.begin.yaral
      set:
        - enum-constant-block
        - enum-constant-arguments-body
    - include: enum-constant-block

  enum-constant-arguments-body:
    - clear_scopes: 1
    - meta_scope: meta.constant.arguments.yaral meta.group.yaral
    - include: group-body

  enum-constant-block:
    - meta_content_scope: meta.constant.yaral
    - match: \{
      scope: punctuation.section.block.begin.yaral
      set: enum-constant-block-body
    - include: else-pop

  enum-constant-block-body:
    - meta_scope: meta.constant.yaral meta.block.yaral
    - include: class-block-body

###[ INTERFACE DECLARATIONS ]##################################################

  interface-keyword:
    - match: (@?)interface{{break}}
      scope: keyword.declaration.interface.yaral
      set:
        - interface-block
        - interface-extends
        - interface-name-meta
        - maybe-type-parameter
        - interface-name

  interface-modifiers:
    - match: '{{interface_modifier}}{{break}}'
      scope: storage.modifier.yaral
    - match: '{{interface_no_modifier}}{{break}}'
      scope: invalid.illegal.unexpected-keyword.yaral
    - include: annotations

  interface-name:
    - match: '{{identifier}}'
      scope: entity.name.interface.yaral
      pop: 1
    - include: else-pop

  interface-name-meta:
    - meta_content_scope: meta.interface.identifier.yaral
    - include: else-pop

  interface-extends:
    - match: extends{{break}}
      scope: storage.modifier.extends.yaral
      push:
        - interface-extends-object-type-list
        - inherited-object-type
    - match: implements{{break}}
      scope: invalid.illegal.unexpected-keyword.yaral
      push:
        - interface-implements-object-type-list
        - inherited-object-type
    - match: permits{{break}}
      scope: storage.modifier.permits.yaral
      push:
        - interface-permits-object-type-list
        - inherited-object-type
    - include: else-pop

  interface-extends-object-type-list:
    - meta_scope: meta.interface.extends.yaral
    - include: inherited-object-type-list
    - include: else-pop

  interface-implements-object-type-list:
    - meta_scope: meta.interface.implements.yaral
    - include: inherited-object-type-list
    - include: else-pop

  interface-permits-object-type-list:
    - meta_scope: meta.interface.permits.yaral
    - include: inherited-object-type-list
    - include: else-pop

  interface-block:
    - match: \{
      scope: punctuation.section.block.begin.yaral
      set: interface-block-body
    - include: else-pop

  interface-block-body:
    - meta_scope: meta.interface.yaral meta.block.yaral
    - include: class-block-body

###[ RECORD DECLARATIONS ]#####################################################

  record-keyword:
    # https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.10
    - match: record{{break}}
      scope: keyword.declaration.record.yaral
      set:
        - class-block
        - record-extends
        - record-parameters
        - maybe-type-parameter
        - class-name

  record-parameters:
    - meta_content_scope: meta.class.identifier.yaral
    - match: \(
      scope: punctuation.section.group.begin.yaral
      set:
        - record-parameter-body
        - parameter-maybe-identifier
        - parameter-maybe-variadic
        - maybe-array-modifiers
        - parameter-type
    - include: else-pop

  record-parameter-body:
    - meta_scope: meta.class.parameters.yaral meta.group.yaral
    - match: \)
      scope: punctuation.section.group.end.yaral
      set:
        - meta_content_scope: meta.class.yaral
        - include: else-pop
    - include: method-parameters-body

  record-extends:
    - match: extends{{break}}
      scope: invalid.illegal.unexpected-keyword.yaral
      push:
        - class-extends-object-type-list
        - inherited-object-type
    - match: implements{{break}}
      scope: storage.modifier.implements.yaral
      push:
        - class-implements-object-type-list
        - inherited-object-type
    - match: permits{{break}}
      scope: invalid.illegal.unexpected-keyword.yaral
      push:
        - class-permits-object-type-list
        - inherited-object-type
    - include: else-pop

###[ MEMBER DECLARATIONS ]#####################################################

  member-declarations:
    - match: (?=[{{id_first_char}}@<])
      branch_point: class-members
      branch:
        - member-maybe-constructor
        - member-maybe-method
        - member-maybe-field
        - member-maybe-class
        - member-maybe-enum
        - member-maybe-interface

  member-else-fail:
    - match: (?=\S)
      fail: class-members

  member-reserved-fail:
    - match: (?={{reserved_words}}{{break}})
      fail: class-members

  member-maybe-class:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.1
    - meta_scope: meta.class.yaral
    - include: class-keyword
    - include: record-keyword
    - include: class-modifiers
    - include: member-else-fail

  member-maybe-enum:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.9
    - meta_scope: meta.enum.yaral
    - include: enum-keyword
    - include: class-modifiers
    - include: member-else-fail

  member-maybe-interface:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-9.html#jls-9.1
    - meta_scope: meta.interface.yaral
    - include: interface-keyword
    - include: interface-modifiers
    - include: member-else-fail

  member-maybe-field:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.3
    - meta_include_prototype: false
    - match: ''
      set:
        - field-identifier-list
        - field-value-assignment
        - field-identifier
        - field-type-modifier
        - field-type
        - field-modifier

  member-maybe-constructor:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.8
    - meta_include_prototype: false
    - match: ''
      set:
        - method-block
        - method-attributes
        - method-array-modifiers
        - method-expect-parameters
        - constructor-name
        - method-modifier

  member-maybe-method:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.4
    - meta_include_prototype: false
    - match: ''
      set:
        - method-block
        - method-attributes
        - method-array-modifiers
        - method-signature
        - method-modifier

###[ FIELD DECLARATIONS ]######################################################

  field-modifier:
    - clear_scopes: 1
    - meta_scope: meta.field.modifier.yaral
    - match: '{{field_modifier}}{{break}}'
      scope: storage.modifier.yaral
    - match: '{{field_no_modifier}}{{break}}'
      scope: invalid.illegal.unexpected-keyword.yaral
    - include: type-parameters
    - include: annotation-else-pop

  field-type:
    - include: primitive-type
    - include: object-type
    - include: illegal-var-type
    - include: member-else-fail

  field-type-modifier:
    - clear_scopes: 1
    - meta_scope: meta.field.type.yaral
    - include: array-modifiers
    - include: annotations
    - match: (?=[{(]|{{declaration_keywords}}{{break}})
      fail: class-members
    - include: else-pop

  field-identifier-list:
    - match: ','
      scope:
        meta.field.yaral
        punctuation.separator.comma.yaral
      push:
        - field-value-assignment
        - field-identifier
    - include: else-pop

  field-identifier:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-VariableDeclaratorId
    - match: '{{uppercase_id}}'
      scope: entity.name.constant.yaral
      pop: 1
    - match: '{{identifier}}'
      scope: variable.other.member.yaral
      pop: 1
    - match: '{{variables}}{{break}}'
      scope: invalid.illegal.identifier.yaral
      pop: 1
    - include: else-pop

  field-value-assignment:
    - meta_content_scope: meta.field.identifier.yaral
    - match: =
      scope:
        meta.field.yaral
        keyword.operator.assignment.yaral
      set: field-value-initializer
    - include: maybe-only-array-modifiers

  field-value-initializer:
    - meta_content_scope: meta.field.value.yaral
    - include: variable-initializer

###[ METHOD DECLARATIONS ]#####################################################

  constructor-name:
    - include: member-reserved-fail
    - match: '{{id}}'
      scope: entity.name.function.constructor.yaral
      pop: 1
    - include: else-pop

  method-modifier:
    - meta_scope: meta.function.modifier.yaral
    - match: '{{method_modifier}}{{break}}'
      scope: storage.modifier.yaral
    - match: '{{method_no_modifier}}{{break}}'
      scope: invalid.illegal.unexpected-keyword.yaral
    - include: type-parameters
    - include: annotation-else-pop

  method-signature:
    - include: method-void-signature
    - include: method-result-signature

  method-void-signature:
    # void indicates a method for sure
    - match: (?=void{{break}})
      set:
        - method-maybe-parameters
        - method-maybe-identifier
        - method-result-modifier
        - method-void-type

  method-void-type:
    - match: void
      scope: storage.type.void.yaral
      pop: 1

  method-result-signature:
    # a method only if parameter list found
    - match: (?=\S)
      set:
        - method-expect-parameters
        - method-expect-identifier
        - method-result-modifier
        - method-result-type

  method-result-type:
    - include: primitive-type
    - include: object-type
    - include: illegal-var-type
    - include: else-pop

  method-result-modifier:
    - clear_scopes: 1
    - meta_scope: meta.function.return-type.yaral
    - include: maybe-array-modifiers

  method-expect-identifier:
    - include: method-identifier
    - include: member-else-fail

  method-maybe-identifier:
    - include: method-identifier
    - include: else-pop

  method-identifier:
    - match: '{{identifier}}'
      scope: entity.name.function.yaral
      pop: 1

  method-expect-parameters:
    - meta_content_scope: meta.function.identifier.yaral
    - include: method-parameters
    - match: (?=\{)
      pop: 1
    - include: member-else-fail

  method-maybe-parameters:
    - meta_content_scope: meta.function.identifier.yaral
    - include: method-parameters
    - include: else-pop

  method-parameters:
    - match: \(
      scope: punctuation.section.group.begin.yaral
      set:
        - method-parameters-body
        - receiver-or-parameter

  method-parameters-body:
    - meta_scope: meta.function.parameters.yaral meta.group.yaral
    - include: group-end
    - match: ','
      scope: punctuation.separator.comma.yaral
      push:
        - parameter-maybe-identifier
        - parameter-maybe-variadic
        - maybe-array-modifiers
        - parameter-type
    - include: expression-terminator

  method-array-modifiers:
    - meta_include_prototype: false
    - match: ''
      set: method-array-modifiers-content

  method-array-modifiers-content:
    - meta_scope: meta.function.yaral
    - include: maybe-array-modifiers

  method-attributes:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.4.6
    - match: throws{{break}}
      scope: storage.modifier.throws.yaral
      set:
        - method-throws-body
        - maybe-illegal-array-modifiers
        - expect-object-type
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-9.html#jls-9.6.2
    - match: default{{break}}
      scope: storage.modifier.default.yaral
      set: method-default-body
    - include: else-pop

  method-default-body:
    - meta_scope: meta.function.default.yaral
    - include: variable-initializer

  method-throws-body:
    - meta_scope: meta.function.throws.yaral
    - match: ','
      scope: punctuation.separator.comma.yaral
      push:
        - maybe-illegal-array-modifiers
        - expect-object-type
    - include: else-pop

  method-block:
    - match: \{
      scope: punctuation.section.block.begin.yaral
      set: method-block-body
    - include: else-pop

  method-block-body:
    - meta_scope: meta.function.yaral meta.block.yaral
    - include: block-body

###[ VARIABLE DECLARATIONS ]###################################################

  variable-declaration-type:
    - include: primitive-type
    - include: var-type
    - include: object-type
    - include: final-modifiers
    - include: annotations
    - include: illegal-storage-modifiers
    - include: else-pop

  variable-declaration-type-modifier:
    - clear_scopes: 1
    - meta_scope: meta.declaration.type.yaral
    - include: maybe-only-array-modifiers

  variable-declaration-list:
    - match: ','
      scope:
        meta.declaration.yaral
        punctuation.separator.comma.yaral
      push:
        - variable-declaration-value-assignment
        - variable-declaration-maybe-identifier
    - include: else-pop

  variable-declaration-expect-identifier:
    - include: variable-declaration-identifier
    - include: declaration-else-fail

  variable-declaration-maybe-identifier:
    - include: variable-declaration-identifier
    - include: else-pop

  variable-declaration-identifier:
    - match: '{{uppercase_id}}'
      scope: constant.other.yaral
      pop: 1
    - match: '{{identifier}}'
      scope: variable.other.yaral
      pop: 1

  variable-declaration-value-assignment:
    - meta_content_scope: meta.declaration.identifier.yaral
    - match: =
      scope:
        meta.declaration.yaral
        keyword.operator.assignment.yaral
      set: variable-declaration-value-initializer
    # found parentheses after identifier, appears to be a method declaration
    - match: (?=\()
      fail: declarations
    - include: maybe-only-array-modifiers

  variable-declaration-value-initializer:
    - meta_content_scope: meta.declaration.value.yaral
    - include: variable-initializer

###[ VARIABLE DECLARATIONS OR ASSIGNMENTS ]####################################

  variable-declarations-or-assignments:
    # A subset of `declarations` to optimize performance in contexts which need
    # to distinguish between variable declaration and variable assignment only.
    - match: (?=[{{id_first_char}}@<])
      branch_point: variable-declarations-or-assignments
      branch:
        - variable-maybe-declaration
        - variable-maybe-assignment

  variable-maybe-assignment:
    - meta_include_prototype: false
    - match: ''
      set:
        - variable-maybe-modifier
        - variable-expect-identifier

  variable-maybe-modifier:
    - meta_content_scope: meta.variable.identifier.yaral
    - include: maybe-only-array-modifiers

  variable-maybe-declaration:
    - meta_include_prototype: false
    - match: ''
      set:
        - variable-declaration-list
        - variable-declaration-value-assignment
        - variable-expect-identifier
        - variable-declaration-type-modifier
        - variable-declaration-type

  variable-expect-identifier:
    - include: variable-declaration-identifier
    - match: (?=\S)
      fail: variable-declarations-or-assignments

###[ IF ELSE STATEMENTS ]######################################################

  if-else-statements:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-14.html#jls-14.9
    - match: if{{break}}
      scope: keyword.control.conditional.if.yaral
      push:
        - if-meta
        - block-or-expression
        - maybe-group
    - match: else{{break}}
      scope: keyword.control.conditional.else.yaral
      push:
        - else-meta
        - block-or-expression

  if-meta:
    - meta_include_prototype: false
    - meta_scope: meta.statement.conditional.if.yaral
    - include: immediately-pop

  else-meta:
    - meta_include_prototype: false
    - meta_scope: meta.statement.conditional.else.yaral
    - include: immediately-pop

###[ SWITCH CASE STATEMENTS ]##################################################

  switch-case-statements:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-14.html#jls-14.11
    - match: case{{break}}
      scope: keyword.control.conditional.case.yaral
      branch_point: case-label
      branch:
        - case-label-constant
        - case-label-expression
    - match: default{{break}}
      scope: keyword.control.conditional.default.yaral
      push: case-default-end
    - match: switch{{break}}
      scope: keyword.control.conditional.switch.yaral
      push:
        - switch-meta
        - block-or-expression
        - maybe-group

  switch-meta:
    - meta_include_prototype: false
    - meta_scope: meta.statement.conditional.switch.yaral
    - include: immediately-pop

  case-default-end:
    - meta_scope: meta.statement.conditional.default.yaral
    - match: ':|->'
      scope: punctuation.separator.expressions.yaral
      pop: 1
    - include: else-pop

  case-label-constant:
    - meta_scope: meta.statement.conditional.case.yaral
    - match: (?=\S)
      set:
        - case-label-constant-end
        - case-label-constant-identifier

  case-label-constant-identifier:
    - include: literal-constant
    - include: constant
    - include: annotations
    - include: case-label-fail

  case-label-constant-end:
    - meta_content_scope: meta.statement.conditional.case.label.yaral
    - include: case-label-end
    - match: (?=[;{}]|(?:{{keywords}}|{{storage_types}}|{{storage_modifiers}}){{break}})
      pop: 1
    - include: case-label-fail

  case-label-expression:
    - meta_scope: meta.statement.conditional.case.yaral
    - match: (?=\S)
      set: case-label-expression-body

  case-label-expression-body:
    - meta_content_scope: meta.statement.conditional.case.label.yaral
    - include: case-label-end
    - include: expression

  case-label-end:
    - match: ':|->'
      scope: meta.statement.conditional.case.yaral punctuation.separator.expressions.yaral
      pop: 1

  case-label-fail:
    - match: (?=\S)
      fail: case-label

###[ DO WHILE STATEMENTS ]#####################################################

  do-while-statements:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-14.html#jls-14.12
    - match: while{{break}}
      scope: keyword.control.loop.while.yaral
      push:
        - while-meta
        - block-or-expression
        - maybe-group
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-14.html#jls-14.13
    - match: do{{break}}
      scope: keyword.control.loop.do-while.yaral
      push:
        - do-meta
        - block-or-expression

  do-meta:
    - meta_include_prototype: false
    - meta_scope: meta.statement.loop.do-while.yaral
    - include: immediately-pop

  while-meta:
    - meta_include_prototype: false
    - meta_scope: meta.statement.loop.while.yaral
    - include: immediately-pop

###[ FOR LOOP STATEMENTS ]#####################################################

  for-statements:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-14.html#jls-14.14
    - match: for{{break}}
      scope: keyword.control.loop.for.yaral
      push:
        - for-meta
        - block-or-expression
        - for-parameters

  for-meta:
    - meta_include_prototype: false
    - meta_scope: meta.statement.loop.for.yaral
    - include: immediately-pop

  for-parameters:
    - match: \(
      scope: punctuation.section.group.begin.yaral
      set:
        - for-parameters-update
        - for-parameters-init
    - include: else-pop

  for-parameters-init:
    # enhanced for statement
    - match: ':'
      scope: keyword.operator.assignment.yaral
      pop: 1
    # basic for statement
    - match: ';'
      scope: punctuation.terminator.yaral
      set: for-parameters-condition
    - include: variable-declarations-or-assignments
    - include: expressions
    - include: expression-terminator

  for-parameters-condition:
    - include: punctuation-terminator-semicolon-pop
    - include: expressions
    - include: expression-terminator

  for-parameters-update:
    - meta_scope: meta.group.yaral
    - include: group-end
    - include: expressions
    - match: ;
      scope: invalid.illegal.stray.yaral
    - include: expression-terminator

###[ FLOW CONTROL STATEMENTS ]#################################################

  labeled-statements:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-14.html#jls-14.7
    - match: ({{identifier}})(:)(?!:)
      captures:
        1: entity.name.label.yaral
        2: punctuation.separator.colon.yaral

  flow-control-statements:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-14.html#jls-14.10
    - match: assert{{break}}
      scope: keyword.control.flow.assert.yaral
      push: assert-statement-body
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-14.html#jls-14.15
    - match: break{{break}}
      scope: keyword.control.flow.break.yaral
      push:
        - break-statement-end
        - variable-label
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-14.html#jls-14.16
    - match: continue{{break}}
      scope: keyword.control.flow.continue.yaral
      push:
        - continue-statement-end
        - variable-label
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-14.html#jls-14.17
    - match: return{{break}}
      scope: keyword.control.flow.return.yaral
      push: return-statement-body
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-14.html#jls-14.18
    - match: throw{{break}}
      scope: keyword.control.flow.throw.yaral
      push: throw-statement-body
    # https://docs.oracle.com/javase/specs/jls/se16/html/jls-14.html#jls-14.21
    - match: yield{{break}}
      scope: keyword.control.flow.yield.yaral
      push: yield-statement-body

  assert-statement-body:
    - meta_scope: meta.statement.conditional.assertion.yaral
    - match: ':'
      scope: punctuation.separator.expressions.yaral
    - include: expression

  break-statement-end:
    - meta_scope: meta.statement.flow.break.yaral
    - include: expect-expression-terminator

  continue-statement-end:
    - meta_scope: meta.statement.flow.continue.yaral
    - include: expect-expression-terminator

  return-statement-body:
    - meta_scope: meta.statement.flow.return.yaral
    - include: expression

  throw-statement-body:
    - meta_scope: meta.statement.flow.throw.yaral
    - include: expression

  yield-statement-body:
    - meta_scope: meta.statement.flow.yield.yaral
    - include: expression

  variable-label:
    - match: '{{identifier}}'
      scope: variable.label.yaral
      pop: 1
    - include: else-pop

###[ SYNCHRONIZED STATEMENTS ]#################################################

  synchronized-statements:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-14.html#jls-14.19
    - match: synchronized{{break}}
      scope: keyword.control.flow.synchronized.yaral
      push:
        - synchronized-meta
        - block-or-expression
        - maybe-group

  synchronized-meta:
    - meta_include_prototype: false
    - meta_scope: meta.statement.flow.synchronized.yaral
    - include: immediately-pop

###[ TRY CATCH STATEMENTS ]####################################################

  try-catch-statements:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-14.html#jls-14.20
    - match: catch{{break}}
      scope: keyword.control.exception.catch.yaral
      push:
        - catch-meta
        - block-or-expression
        - catch-parameters
    - match: finally{{break}}
      scope: keyword.control.exception.finally.yaral
      push:
        - finally-meta
        - block-or-expression
    - match: try{{break}}
      scope: keyword.control.exception.try.yaral
      push:
        - try-meta
        - block-or-expression
        - try-parameters

  catch-meta:
    - meta_include_prototype: false
    - meta_scope: meta.statement.exception.catch.yaral
    - include: immediately-pop

  catch-parameters:
    - match: \(
      scope: punctuation.section.group.begin.yaral
      set:
        - catch-parameters-end
        - maybe-illegal-array-modifiers
        - catch-parameter-identifier
        - maybe-illegal-array-modifiers
        - catch-parameter-type
    - include: else-pop

  catch-parameter-type:
    - include: final-modifiers
    - include: illegal-storage-modifiers
    - include: expect-object-type

  catch-parameter-identifier:
    - match: \|
      scope: punctuation.separator.pipe.yaral
      push:
        - maybe-illegal-array-modifiers
        - catch-parameter-type
    - match: '{{identifier}}'
      scope: variable.other.yaral
      pop: 1
    - match: '{{variables}}{{break}}'
      scope: invalid.illegal.identifier.yaral
      pop: 1
    - include: else-pop

  catch-parameters-end:
    - meta_scope: meta.group.yaral
    - include: group-end
    - match: '[^\s\)]+'
      scope: invalid.illegal.unexpected-token.yaral

  finally-meta:
    - meta_include_prototype: false
    - meta_scope: meta.statement.exception.finally.yaral
    - include: immediately-pop

  try-meta:
    - meta_include_prototype: false
    - meta_scope: meta.statement.exception.try.yaral
    - include: immediately-pop

  try-parameters:
    - match: \(
      scope: punctuation.section.group.begin.yaral
      set: try-parameters-body
    - include: else-pop

  try-parameters-body:
    - meta_scope: meta.group.yaral
    - include: group-end
    - include: variable-declarations-or-assignments
    - include: punctuation-terminator-semicolon
    - include: expressions
    - include: expression-terminator

###[ EXPRESSIONS ]#############################################################

  else-expressions:
    - match: (?=\S)
      push: expression

  else-expression:
    - match: (?=\S)
      set: expression

  expression:
    - include: expression-terminator
    - include: expressions

  expression-terminator:
    - match: |-
        (?x)(?=
          [;)\]{}] |
          ( {{control_keywords}}
          | {{declaration_keywords}}
          | {{storage_modifiers}}
          | {{storage_types}}
          | {{newline}}
          ){{break}}
        )
      pop: 1

  expect-expression-terminator:
    - include: expression-terminator
    - match: \S
      scope: invalid.illegal.expect-terminator.yaral

###[ INSTANTIATION EXPRESSIONS ]###############################################

  instantiations:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-15.html#jls-15.9
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-15.html#jls-15.10
    - match: new{{break}}
      scope: keyword.other.storage.new.yaral
      push:
        - instantiation-meta
        - instantiation-arguments
        - instantiation-type
        - maybe-type-argument
    - include: annotations

  instantiation-meta:
    - meta_include_prototype: false
    - meta_scope: meta.instantiation.yaral
    - include: immediately-pop

  instantiation-type:
    - include: primitive-type
    - include: object-type
    - include: annotations
    - include: illegal-storage-modifiers
    - include: illegal-unexpected-keywords
    - include: else-pop

  instantiation-arguments:
    - match: \(
      scope: punctuation.section.group.begin.yaral
      set:
        - class-block
        - group-body
    - include: array-dimensions
    - include: else-pop

  array-dimensions:
    - match: \[
      scope: punctuation.section.brackets.begin.yaral
      set: array-dimension-body
    - include: array-initializer
    - include: annotations

  array-dimension-body:
    - meta_scope: meta.brackets.yaral
    - match: \]
      scope: punctuation.section.brackets.end.yaral
      set:
        - include: array-dimensions
        - include: else-pop
    - include: expressions
    - include: expression-terminator

###[ INITIALIZATION EXPRESSIONS ]##############################################

  variable-initializers:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.3
    - include: array-initializers
    - include: ternary-initializers
    - include: expressions

  variable-initializer:
    - match: (?=,)
      pop: 1
    - match: ':'
      pop: 1
    - include: array-initializers
    - include: ternary-initializers
    - include: expression

  array-initializers:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-10.html#jls-10.6
    - match: \{
      scope: punctuation.section.braces.begin.yaral
      push: array-initializer-body

  array-initializer:
    - match: \{
      scope: punctuation.section.braces.begin.yaral
      set: array-initializer-body

  array-initializer-body:
    - meta_scope: meta.braces.yaral
    - match: \}
      scope: punctuation.section.braces.end.yaral
      pop: 1
    - include: variable-initializers

  ternary-initializers:
    - match: \?
      scope: keyword.operator.ternary.yaral
      push: ternary-initializer-body

  ternary-initializer-body:
    - include: operator-ternary-colon
    - include: variable-initializer

###[ BLOCKS ]##################################################################

  block-or-expression:
    - include: block
    - include: else-expression

  blocks:
    - match: \{
      scope: punctuation.section.block.begin.yaral
      push: block-body
    - include: stray-braces

  block:
    - match: \{
      scope: punctuation.section.block.begin.yaral
      set: block-body

  block-end:
    - match: \}
      scope: punctuation.section.block.end.yaral
      pop: 1
  event-block-end:
    - match: 'match:'
      scope: punctuation.section.block.end.yaral
      pop: 1

  block-body:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-14.html#jls-14.2
    - meta_scope: meta.block.yaral
    - include: block-end
    - include: declarations
    - include: statements
    - include: else-expressions

###[ GROUPS ]##################################################################

  groups:
    - match: \(
      scope: punctuation.section.group.begin.1.yaral
      branch_point: groups
      branch:
        - cast-expression-group
        - expression-group
        - lambda-parameter-group

  group-else-fail:
    - match: (?=\S)
      fail: groups

  maybe-group:
    - match: \(
      scope: punctuation.section.group.begin.yaral
      set: group-body
    - include: else-pop

  group-body:
    - meta_scope: meta.group.yaral
    - include: group-end
    - include: expressions
    - include: expression-terminator

  group-end:
    - match: \)
      scope: punctuation.section.group.end.yaral
      # pop: 0

###[ CAST EXPRESSION GROUPS ]##################################################

  cast-expression-group:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-15.html#jls-15.16
    - meta_scope: meta.cast.yaral meta.group.yaral
    - meta_include_prototype: false
    - match: ''
      set:
        - cast-expression-group-body
        - maybe-only-array-modifiers
        - cast-expression-type

  cast-expression-group-body:
    - meta_scope: meta.cast.yaral meta.group.yaral
    - match: \)
      scope: punctuation.section.group.end.yaral
      set: cast-expression-group-end
    - include: additional-bounds
    - include: group-else-fail

  cast-expression-group-end:
    # cast expressions may be followed by:
    # - `!`     : unary operator
    # - `~`     : unary operator
    # - `(`     : cast, lambda or group expression
    # - literal : variable, type or method
    - match: (?=[{{id_first_char}}!~(])
      pop: 1
    - include: group-else-fail

  cast-expression-type:
    - include: primitive-type
    - include: object-type
    - include: illegal-var-type
    - include: annotations
    - include: maybe-type-argument

###[ EXPRESSION GROUPS ]#######################################################

  expression-group:
    - meta_scope: meta.group.yaral
    - match: \)
      scope: punctuation.section.group.end.yaral
      set: expression-group-end
    - include: expressions
    - include: expression-terminator

  expression-group-end:
    # looks like a lambda
    - match: (?=->)
      fail: groups
    - include: else-pop

###[ LAMBDA PARAMETER GROUPS ]#################################################

  lambda-parameter-group:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-15.html#jls-15.27
    - meta_scope: meta.function.anonymous.parameters.yaral meta.group.yaral
    - match: \)
      scope: punctuation.section.group.end.yaral
      set: lambda-meta
    - match: (?=[{{id_first_char}}@<])
      branch_point: lambda-parameter-declaration
      branch:
        - lambda-parameter-declaration
        - lambda-parameter-declaration-identifier
    - include: punctuation-separator-comma
    - include: expect-expression-terminator

  lambda-parameter-declaration:
    - meta_include_prototype: false
    - match: ''
      set:
        - lambda-parameter-declaration-identifier
        - parameter-maybe-variadic
        - maybe-array-modifiers
        - variable-declaration-type

  lambda-parameter-declaration-identifier:
    - include: parameter-identifier
    - match: (?=\S)
      fail: lambda-parameter-declaration

  lambdas:
    - match: ->
      scope:
        meta.function.anonymous.yaral
        keyword.declaration.function.arrow.yaral
      push:
        - lambda-meta
        - block-or-expression

  lambda-meta:
    - meta_content_scope: meta.function.anonymous.yaral
    - include: else-pop

###[ RECEIVER OR FORMAL PARAMETERS ]###########################################

  receiver-or-parameter:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.4
    # The first parameter of a method or constructor declaration may be a
    # receiver parameter which represents the object to invoke the method for.
    - match: (?=[{{id_first_char}}<])
      branch_point: receiver-or-parameter
      branch:
        - receiver
        - parameter
    - include: annotation-else-pop

  receiver:
    - meta_include_prototype: false
    - match: ''
      pop: 1
      set:
        - receiver-identifier
        - receiver-type

  receiver-type:
    # A 'receiver-type' is basically an 'object-type' whose 'namespace' part
    # is skipped as it is expected to be declared in the same source file due
    # to receiver args being valid only for nested class' methods.
    - match: (?={{reserved_words}}{{break}})
      fail: receiver-or-parameter
    - match: (?=\S)
      branch_point: receiver-type
      branch:
        - receiver-unqualified-type
        - receiver-qualified-type

  receiver-unqualified-type:
    - match: '{{identifier}}'
      scope: storage.type.class.yaral
      push:
        - receiver-unqualified-type-end
        - maybe-array-modifiers
        - maybe-type-argument
    - include: else-pop2

  receiver-unqualified-type-end:
    - match: (?={{id_first_char}})
      pop: 3
    - match: (?={{single_dot}})
      fail: receiver-type
    - match: (?=\S)
      fail: receiver-or-parameter

  receiver-qualified-type:
    - meta_scope: meta.path.yaral
    - match: '{{identifier}}'
      scope: storage.type.class.yaral
      push:
        - receiver-qualified-type-end
        - qualified-object-type-arguments
    - include: annotation-else-pop2

  receiver-qualified-type-end:
    - match: \s*({{single_dot}})
      captures:
        1: punctuation.accessor.dot.yaral
      pop: 1
    # consume comments
    - match: \s*(?=/[/*])
    # Maintain meta.path boundaries at the end of the type.
    - match: (?=\s*\S)
      pop: 3

  receiver-identifier:
    - match: (?=\S)
      branch_point: receiver-identifier
      branch:
        - receiver-unqualified-identifier
        - receiver-qualified-identifier

  receiver-unqualified-identifier:
    - match: this{{break}}
      scope: markup.raw.inline.yaral
      push: receiver-identifier-end
    - match: '{{identifier}}'
      scope: variable.parameter.receiver.unqualified.yaral
      set: receiver-unqualified-identifier-end
    - include: annotation-else-pop2

  receiver-unqualified-identifier-end:
    - match: (?={{single_dot}})
      fail: receiver-identifier
    - match: (?=\S)
      fail: receiver-or-parameter

  receiver-qualified-identifier:
    - meta_include_prototype: false
    - match: ''
      branch_point: receiver-qualified-identifier
      branch:
        - receiver-qualified-identifier-path
        - receiver-qualified-identifier-name

  receiver-qualified-identifier-path:
    - meta_scope: meta.path.yaral
    - match: '{{id}}'
      scope: storage.type.class.yaral
      push:
        - receiver-qualified-identifier-accessor
        - maybe-type-argument
    - include: annotation-else-pop3

  receiver-qualified-identifier-accessor:
    - include: punctuation-accessor-dot-pop2
    - match: (?=\S)
      fail: receiver-qualified-identifier

  receiver-qualified-identifier-name:
    - meta_scope: meta.path.yaral
    - match: this{{break}}
      scope: markup.raw.inline.yaral
      set: receiver-identifier-end
    - match: '{{identifier}}'
      scope: invalid.illegal.identifier.yaral
      set: receiver-identifier-end
    - include: annotation-else-pop3

  receiver-identifier-end:
    - include: illegal-array-modifiers
    - include: illegal-members
    - include: annotation-else-pop3

  parameter:
    - meta_include_prototype: false
    - match: ''
      pop: 1
      set:
        - parameter-maybe-identifier
        - parameter-maybe-variadic
        - maybe-array-modifiers
        - parameter-type

  parameter-type:
    - include: final-modifiers
    - include: illegal-storage-modifiers
    - include: primitive-type
    - include: illegal-var-type
    - include: maybe-object-type

  parameter-maybe-variadic:
    - match: \.\.\.
      scope: keyword.operator.variadic.yaral
      pop: 1
    - include: annotation-else-pop

  parameter-maybe-identifier:
    - include: parameter-identifier
    - include: else-pop

  parameter-identifier:
    - match: '{{identifier}}'
      scope: markup.raw.inline.yaral
      set: maybe-only-array-modifiers
    - match: '{{variables}}{{break}}'
      scope: invalid.illegal.identifier.yaral
      set: maybe-only-array-modifiers

###[ VARIABLES ]###############################################################

  variables:
    # Note:
    # 1) `variable-other` must be the first branch to scope the very last
    #    identifier before eof or end of embedded section as ordinary variable.
    # 2) `variable-qualifier` scopes identifiers not followed by ClassCaseIds
    #    as ordinary variables. Found no easy enough solution by only using
    #    `variable-other` and `variable-namespace`.
    - match: (?={{id_first_char}})
      branch_point: variables
      branch:
        # - variable-other
        # - variable-namespace
        - variable-qualifier
        - method-call-identifier
        # - lambda-parameter
    - include: variable-item-access
  method-call-identifier:
    - meta_include_prototype: false
    - match: '{{id}}'
      scope:
        meta.function-call.identifier.yaral
        variable.function.yaral
      set: method-call-arguments
    - include: immediately-pop

  method-call-arguments:
    - meta_content_scope: meta.function-call.identifier.yaral
    - match: \(
      scope: punctuation.section.group.begin.yaral
      set: method-call-arguments-body
    - match: (?=\S)
      fail: variables

  method-call-arguments-body:
    - meta_scope: meta.function-call.arguments.yaral meta.group.yaral
    - include: group-body

  lambda-parameter:
    - meta_include_prototype: false
    - match: '{{id}}'
      scope:
        meta.function.anonymous.parameters.yaral
        markup.raw.inline.yaral
      set: lambda-parameter-end
    - include: immediately-pop

  lambda-parameter-end:
    - meta_content_scope: meta.function.anonymous.yaral
    - include: else-pop

  variable-namespace:
    - match: '{{lowercase_id}}'
      scope: variable.namespace.yaral
      push: variable-namespace-accessor
    - match: ''
      fail: variables

  variable-namespace-accessor:
    - meta_scope: meta.path.yaral
    - match: '{{single_dot}}'
      scope: punctuation.accessor.dot.yaral
      set:
        - match: '{{classcase_id}}'
          scope: storage.type.class.yaral
          set:
            - variable-namespace-meta
            - maybe-object-type-child
            - maybe-array-modifiers
            - maybe-type-argument
        - include: else-pop
    - match: (?=\S)
      fail: variables

  variable-namespace-meta:
    - meta_include_prototype: false
    - meta_scope: meta.path.yaral
    - include: immediately-pop2

  variable-other:
    - meta_include_prototype: false
    - match: (?:\S)
      pop: 1
    - match: '{{id}}'
      scope:
        meta.variable.identifier.yaral
        variable.other.yaral
      set: variable-other-end
    - include: immediately-pop

  variable-other-end:
    - meta_content_scope: meta.variable.identifier.yaral
    - match: \s*(\.|\(|->)
      fail: variables
    - include: variable-item-access-end

  variable-qualifier:
    - meta_include_prototype: false
    - match: '{{id}}'
      scope:
        meta.variable.identifier.yaral
        punctuation.section.yaral
      set: variable-qualifier-end
    - include: immediately-pop

  variable-qualifier-end:
    - meta_content_scope: meta.variable.identifier.yaral
    - match: \s*(\(|->)
      fail: variables
    - include: variable-item-access-end

  variable-item-access:
    - match: \[
      scope: punctuation.section.brackets.begin.yaral
      push: variable-item-access-body

  variable-item-access-body:
    - meta_scope: meta.variable.item-access.yaral meta.brackets.yaral
    - match: \]
      scope: punctuation.section.brackets.end.yaral
      set: variable-item-access-end
    - include: expressions
    - include: expression-terminator

  variable-item-access-end:
    - meta_content_scope: meta.variable.item-access.yaral
    # - match: \s*(?=\[|/[/*])
    - match: (?=\s*\S)
      pop: 1

  variable-language-class:
    - match: class{{break}}
      scope: variable.language.class.yaral
      pop: 1

  maybe-function-reference:
    - match: new{{break}}
      scope: keyword.other.storage.new.yaral
      pop: 1
    - match: '{{identifier}}'
      scope: variable.function.reference.yaral
      pop: 1
    - include: else-pop

###[ LITERALS ]################################################################

  literals:
    - include: literal-chars
    - include: literal-strings
    - include: literal-numbers
    - include: literal-constants
    - include: literal-variables

  literal-variables:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-3.html#jls-3.9
    - match: _{{break}}
      scope: variable.language.anonymous.yaral
    - match: super{{break}}
      scope: variable.language.super.yaral
    - match: this{{break}}
      scope: variable.language.this.yaral

  literal-constants:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-3.html#jls-3.10.3
    - match: (?:false|true){{break}}
      scope: constant.language.boolean.yaral
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-3.html#jls-3.10.7
    - match: null{{break}}
      scope: constant.language.null.yaral

  literal-constant:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-3.html#jls-3.10.3
    - match: (?:false|true){{break}}
      scope: constant.language.boolean.yaral
      pop: 1
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-3.html#jls-3.10.7
    - match: null{{break}}
      scope: constant.language.null.yaral
      pop: 1

  literal-numbers:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-3.html#jls-3.10
    # hexadecimal floats
    - match: |-
        (?x)
        ([0-9]+)({{time_digit}})
      scope: meta.number.float.hexadecimal.yaral
      captures:
        1: constant.numeric.base.yaral
        2: constant.character.literal.yaral
    - match: |-
        (?x)
        # 0x1., 0x1.1, 0x1.1p1, 0x1.1p-1, 0x1.p1, 0x1.p-1 | 0x1p1 | 0x.1, 0x.1p1, 0x.1p-1
        (0[xX]) ( {{hex_digit}}* (?: ({{single_dot}}) {{hex_digit}}* (?:{{hex_exponent}})? | {{hex_exponent}} ) ) ({{float_suffix}})?
      scope: meta.number.float.hexadecimal.yaral
      captures:
        1: constant.numeric.base.yaral
        2: constant.numeric.value.yaral
        3: punctuation.separator.decimal.yaral
        4: constant.numeric.suffix.yaral
    # decimal floats
    - match: |-
        (?x)
        ([0-9]{{dec_digit}}*)
        (?:
          # 1., 1.1, 1.1e1, 1.1e-1, 1.e1, 1.e-1, 1.d, 1.1d, 1.1e1d, 1.1e-1d, 1.e1d, 1.e-1d
          ( ({{single_dot}}) {{dec_digit}}* (?:{{dec_exponent}})? ) ({{float_suffix}})?
          # 1e1 1e1d
          | ({{dec_exponent}}) ({{float_suffix}})?
          # 1d
          | ({{float_suffix}})
        )
        | ( ({{single_dot}}) {{dec_digit}}+ (?:{{dec_exponent}})? ) ({{float_suffix}})?
      scope: meta.number.float.decimal.yaral
      captures:
        1: constant.numeric.value.yaral
        2: constant.numeric.value.yaral
        3: punctuation.separator.decimal.yaral
        4: constant.numeric.suffix.yaral
        5: constant.numeric.value.yaral
        6: constant.numeric.suffix.yaral
        7: constant.numeric.suffix.yaral
        8: constant.numeric.value.yaral
        9: punctuation.separator.decimal.yaral
        10: constant.numeric.suffix.yaral
    # binary integers
    - match: (0[bB])({{bin_digit}}*)({{int_suffix}})?
      scope: meta.number.integer.binary.yaral
      captures:
        1: constant.numeric.base.yaral
        2: constant.numeric.value.yaral
        3: constant.numeric.suffix.yaral
    # hexadecimal integers
    - match: (0[xX])({{hex_digit}}*)({{int_suffix}})?
      scope: meta.number.integer.hexadecimal.yaral
      captures:
        1: constant.numeric.base.yaral
        2: constant.numeric.value.yaral
        3: constant.numeric.suffix.yaral
    # octal integers
    - match: (0)({{oct_digit}}+)({{int_suffix}}|(?![\d_]))
      scope: meta.number.integer.octal.yaral
      captures:
        1: constant.numeric.base.yaral
        2: constant.numeric.value.yaral
        3: constant.numeric.suffix.yaral
    # decimal integers
    - match: ((0_*)?[1-9]{{dec_digit}}*|0(?![\d_]))({{int_suffix}})?
      scope: meta.number.integer.decimal.yaral
      captures:
        1: constant.numeric.value.yaral
        2: invalid.illegal.numeric.yaral
        3: constant.numeric.suffix.yaral

  literal-chars:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-3.html#jls-3.10.4
    - match: (')(?:({{escape_unicode}})|({{escape_octal}})|({{escape_other}})|([^']))(')
      scope: meta.string.yaral string.quoted.single.yaral
      captures:
        1: punctuation.definition.string.begin.yaral
        2: constant.character.escape.unicode.yaral
        3: constant.character.escape.octal.yaral
        4: constant.character.escape.other.yaral
        5: constant.character.literal.yaral
        6: punctuation.definition.string.end.yaral

  literal-strings:
    - include: literal-double-quoted-textblocks
    - include: literal-double-quoted-strings
    - include: literal-single-quoted-strings

  literal-single-quoted-strings:
    # Java doesn't support single quoted strings, but Groovy does.
    - match: (')[^']+(')
      scope: invalid.illegal.not-a-char.yaral

  literal-double-quoted-strings:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-3.html#jls-3.10.5
    - match: \"
      scope: punctuation.definition.string.begin.yaral
      push: literal-double-quoted-string-body

  literal-double-quoted-string-body:
    - meta_include_prototype: false
    - meta_scope: meta.string.yaral source.yaml string.yaral
    - match: \"
      scope: punctuation.definition.string.end.yaral
      pop: 1
    - include: illegal-newline
    - include: literal-string-escapes

  literal-double-quoted-textblocks:
    # https://docs.oracle.com/javase/specs/jls/se16/html/jls-3.html#jls-3.10.6
    - match: (\"{3})\s*(.*)$
      captures:
        1: punctuation.definition.string.begin.yaral
        2: invalid.illegal.unexpected-content.yaral
      push: literal-double-quoted-textblock-body

  literal-double-quoted-textblock-body:
    - meta_include_prototype: false
    - meta_scope: meta.string.yaral string.quoted.triple.yaral
    - match: \"{3}
      scope: punctuation.definition.string.end.yaral
      pop: 1
    - include: literal-string-escapes

  literal-string-escapes:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-3.html#jls-3.3
    - match: '{{escape_unicode}}'
      scope: constant.character.escape.unicode.yaral
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-3.html#jls-3.10.6
    - match: '{{escape_octal}}'
      scope: constant.character.escape.octal.yaral
    - match: '{{escape_other}}'
      scope: constant.character.escape.other.yaral
    - match: \\.
      scope: invalid.illegal.escape.yaral

###[ OPERATORS ]###############################################################

  operators:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-3.html#jls-3.12
    - match: (<<|>>>?|[-+*/%|&\^])=
      scope: keyword.operator.assignment.augmented.yaral
    - match: '<<|>>>?'
      scope: keyword.operator.bitwise.yaral
    - match: '==|!=|<=|>=|<>|<|>|over|after|and|in|\p{N}d|all'
      scope: keyword.operator.comparison.yaral
    - match: '='
      scope: keyword.operator.assignment.yaral
      push: variable-initializer
    - match: '\+\+?|\-\-?|[*/]'
      scope: keyword.operator.arithmetic.yaral
    - match: '%'
      scope: punctuation.definition.annotation.reference-type.yaral
      push: reference-type-param
    - match: '!|&&|\|\|'
      scope: keyword.operator.logical.yaral
    - match: '[~|&\^]'
      scope: keyword.operator.bitwise.yaral
    - match: '\?'
      scope: keyword.operator.ternary.yaral
      push: ternary-expression
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-15.html#jls-15.20.2
    - match: instanceof{{break}}
      scope: keyword.other.storage.instanceof.yaral
      push:
        - maybe-only-array-modifiers
        - cast-expression-type
  reference-type-param:
    - match: '{{id}}'
      scope: string.reference-type.yaral
      pop: 1
    - match: \<
      scope: punctuation.definition.annotation.reference-type.yaral
      push:
        - match: '{{id}}'
          scope: string.reference-type.yaral
        - match: \>
          scope: punctuation.definition.annotation.reference-type.yaral
          pop: 2
    - include: else-pop



  operator-ternary-colon:
    - match: ':'
      scope: keyword.operator.ternary.yaral
      pop: 1

  ternary-expression:
    - include: operator-ternary-colon
    - include: expression

###[ PUNCTUATIONS ]############################################################

  punctuations:
    - match: '::'
      scope: punctuation.accessor.double-colon.yaral
      push:
        - maybe-function-reference
        - maybe-type-argument
    - match: '{{single_dot}}'
      scope: punctuation.accessor.dot.yaral
      push:
        - include: variable-language-class
        - include: maybe-type-argument
    - include: punctuation-separator-comma

  punctuation-accessor-dot:
    - match: '{{single_dot}}'
      scope: punctuation.accessor.dot.yaral

  punctuation-accessor-dot-pop:
    - match: '{{single_dot}}'
      scope: punctuation.accessor.dot.yaral
      pop: 1

  punctuation-accessor-dot-pop2:
    - match: '{{single_dot}}'
      scope: punctuation.accessor.dot.yaral
      pop: 2

  punctuation-separator-comma:
    - match: ','
      scope: punctuation.separator.comma.yaral

  punctuation-terminator-semicolon:
    - match: ;
      scope: punctuation.terminator.yaral

  punctuation-terminator-semicolon-pop:
    - match: ;
      scope: punctuation.terminator.yaral
      pop: 1

###[ CONSTANT ]################################################################

  constant:
    - match: (?={{identifier}})
      branch_point: constant
      branch:
        - unqualified-constant
        - qualified-constant

  unqualified-constant:
    - meta_include_prototype: false
    - match: '{{id}}'
      scope: constant.other.yaral
      set: unqualified-constant-end
    - include: immediately-pop2

  unqualified-constant-end:
    - match: (?={{single_dot}})
      fail: constant
    - include: else-pop2

  qualified-constant:
    - meta_include_prototype: false
    - meta_content_scope: meta.path.yaral
    - match: ''
      branch_point: qualified-constant
      branch:
        - qualified-constant-package
        - qualified-constant-class-or-name

  qualified-constant-package:
    - match: '{{lowercase_id}}'
      scope: variable.namespace.yaral
      set: qualified-constant-package-accessor
    - include: annotations
    - match: (?=\S)
      fail: qualified-constant

  qualified-constant-package-accessor:
    - include: punctuation-accessor-dot-pop
    - match: (?=\S)
      fail: qualified-constant

  qualified-constant-class-or-name:
    - meta_include_prototype: false
    - match: ''
      pop: 1
      branch_point: qualified-constant-class-or-name
      branch:
        - qualified-constant-class
        - qualified-constant-name

  qualified-constant-class:
    - match: '{{identifier}}'
      scope: storage.type.class.yaral
      set:
        - qualified-constant-class-accessor
        - maybe-type-argument
    - include: annotation-else-pop3

  qualified-constant-class-accessor:
    - include: punctuation-accessor-dot-pop
    - match: (?=\S)
      fail: qualified-constant-class-or-name

  qualified-constant-name:
    - match: '{{identifier}}'
      scope: constant.other.yaral
      pop: 3
    - include: annotation-else-pop3

###[ STATIC IMPORT ]###########################################################

  static-import:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-7.html#jls-7.5.3
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-7.html#jls-7.5.4
    - meta_include_prototype: false
    - meta_content_scope: meta.path.yaral
    - match: ''
      branch_point: static-import
      branch:
        - static-import-package
        - static-import-class-or-name

  static-import-package:
    - match: '{{lowercase_id}}'
      scope: variable.namespace.yaral
      set: static-import-package-accessor
    - include: annotations
    - match: (?=\S)
      fail: static-import

  static-import-package-accessor:
    - include: punctuation-accessor-dot-pop
    - match: (?=\S)
      fail: static-import

  static-import-class-or-name:
    - meta_include_prototype: false
    - match: ''
      pop: 1
      branch_point: static-import-class-or-name
      branch:
        - static-import-class
        - static-import-name

  static-import-class:
    - match: '{{identifier}}'
      scope: storage.type.class.yaral
      set:
        - static-import-class-accessor
        - maybe-type-argument
    - include: import-wildcard
    - include: annotation-else-pop2

  static-import-class-accessor:
    - include: punctuation-accessor-dot-pop
    - match: (?=\S)
      fail: static-import-class-or-name

  static-import-name:
    - match: '{{uppercase_id}}'
      scope: entity.name.constant.yaral
      pop: 2
    - match: '{{identifier}}'
      scope: entity.name.import.yaral
      pop: 2
    - include: annotation-else-pop2

###[ TYPE IMPORT ]#############################################################

  type-import:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-7.html#jls-7.5.1
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-7.html#jls-7.5.2
    - meta_include_prototype: false
    - meta_content_scope: meta.path.yaral
    - match: ''
      branch_point: type-import
      branch:
        - type-import-package
        - type-import-class-or-name

  type-import-package:
    - match: '{{lowercase_id}}'
      scope: variable.namespace.yaral
      set: type-import-package-accessor
    - include: annotations
    - match: (?=\S)
      fail: type-import

  type-import-package-accessor:
    - include: punctuation-accessor-dot-pop
    - match: (?=\S)
      fail: type-import

  type-import-class-or-name:
    - meta_include_prototype: false
    - match: ''
      pop: 1
      branch_point: type-import-class-or-name
      branch:
        - type-import-class
        - type-import-name

  type-import-class:
    - match: '{{identifier}}'
      scope: storage.type.class.yaral
      set:
        - type-import-class-accessor
        - maybe-type-argument
    - include: import-wildcard
    - include: annotation-else-pop2

  type-import-class-accessor:
    - include: punctuation-accessor-dot-pop
    - match: (?=\S)
      fail: type-import-class-or-name

  type-import-name:
    - match: '{{identifier}}'
      scope: entity.name.class.yaral
      pop: 2
    - include: annotation-else-pop2

###[ ENTITY CLASS ]############################################################

  entity-class:
    - match: (?={{identifier}})
      branch_point: entity-class
      branch:
        - entity-class-qualified-identifier
        - entity-class-unqualified-identifier

  entity-class-qualified-identifier:
    - match: '{{id}}'
      scope: variable.namespace.yaral
      set:
        - meta_scope: meta.path.yaral
        - match: '{{single_dot}}'
          scope: punctuation.accessor.dot.yaral
          set:
            - meta_include_prototype: false
            - meta_content_scope: meta.path.yaral
            - match: ''
              branch_point: entity-class-path
              branch:
                - entity-class-qualifier
                - entity-class-identifier
        - match: (?=\S)
          fail: entity-class

  entity-class-qualifier:
    - match: '{{identifier}}'
      scope: variable.namespace.yaral
      set:
        - entity-class-accessor
        - maybe-type-argument
    - include: else-pop2

  entity-class-accessor:
    - include: punctuation-accessor-dot-pop
    - match: (?=\S)
      fail: entity-class-path

  entity-class-identifier:
    - match: '{{identifier}}'
      scope: entity.name.class.yaral
      set:
        - immediately-pop2
        - maybe-type-argument
    - include: else-pop2

  entity-class-unqualified-identifier:
    - match: '{{id}}'
      scope: entity.name.class.yaral
      set: maybe-type-argument

###[ ENTITY MODULE ]###########################################################

  entity-module:
    - match: (?={{identifier}})
      branch_point: entity-module
      branch:
        - entity-module-qualified-identifier
        - entity-module-unqualified-identifier

  entity-module-qualified-identifier:
    - match: '{{id}}'
      scope: variable.namespace.yaral
      set:
        - meta_scope: meta.path.yaral
        - match: '{{single_dot}}'
          scope: punctuation.accessor.dot.yaral
          set:
            - meta_include_prototype: false
            - meta_content_scope: meta.path.yaral
            - match: ''
              branch_point: entity-module-path
              branch:
                - entity-module-qualifier
                - entity-module-identifier
        - match: (?=\S)
          fail: entity-module

  entity-module-qualifier:
    - match: '{{identifier}}'
      scope: variable.namespace.yaral
      set: entity-module-accessor
    - include: else-pop2

  entity-module-accessor:
    - include: punctuation-accessor-dot-pop
    - match: (?=\S)
      fail: entity-module-path

  entity-module-identifier:
    - match: '{{identifier}}'
      scope: entity.name.namespace.module.yaral
      pop: 2
    - include: else-pop2

  entity-module-unqualified-identifier:
    - match: '{{id}}'
      scope: entity.name.namespace.module.yaral
      pop: 1

###[ ENTITY PACKAGE ]##########################################################

  entity-package:
    - match: (?={{identifier}})
      branch_point: entity-package
      branch:
        - entity-package-qualified-identifier
        - entity-package-unqualified-identifier

  entity-package-qualified-identifier:
    - match: '{{id}}'
      scope: variable.namespace.yaral
      set:
        - meta_scope: meta.path.yaral
        - match: '{{single_dot}}'
          scope: punctuation.accessor.dot.yaral
          set:
            - meta_include_prototype: false
            - meta_content_scope: meta.path.yaral
            - match: ''
              branch_point: entity-package-path
              branch:
                - entity-package-qualifier
                - entity-package-identifier
        - match: (?=\S)
          fail: entity-package

  entity-package-qualifier:
    - match: '{{identifier}}'
      scope: variable.namespace.yaral
      set: entity-package-accessor
    - include: else-pop2

  entity-package-accessor:
    - include: punctuation-accessor-dot-pop
    - match: (?=\S)
      fail: entity-package-path

  entity-package-identifier:
    - match: '{{identifier}}'
      scope: entity.name.namespace.package.yaral
      pop: 2
    - include: else-pop2

  entity-package-unqualified-identifier:
    - match: '{{id}}'
      scope: entity.name.namespace.package.yaral
      pop: 1

###[ OBJECT TYPES ]############################################################

  object-types:
    # Popular JDK classes, generic type variable
    - match: (?:UUID|UR[LI]|\p{Lu}){{break}}
      scope: storage.type.class.yaral
      push:
        - maybe-object-type-child
        - maybe-array-modifiers
        - maybe-type-argument
    # Uppercase constants
    - match: '{{uppercase_id}}'
      scope: constant.other.yaral
    # Classes
    - match: '{{classcase_id}}'
      scope: storage.type.class.yaral
      push:
        - maybe-object-type-child
        - maybe-array-modifiers
        - maybe-type-argument

  maybe-object-type-child:
    - match: '{{single_dot}}'
      scope: punctuation.accessor.dot.yaral
      set: object-types-child-identifier
    - include: else-pop

  object-types-child-identifier:
    - include: variable-language-class
    - match: '{{uppercase_id}}'
      scope: constant.other.yaral
      pop: 1
    - match: '{{classcase_id}}'
      scope: storage.type.class.yaral
      set:
        - maybe-object-type-child
        - maybe-array-modifiers
        - maybe-type-argument
    - include: annotation-else-pop

###[ OBJECT TYPE ]#############################################################

  expect-object-type:
    - include: object-type
    - include: annotations
    - include: illegal-unexpected-reserved
    - include: else-pop

  maybe-object-type:
    - include: object-type
    - include: annotation-else-pop

  object-type:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-4.html#jls-4.3
    - match: (?={{identifier}})
      branch_point: object-type
      branch:
        - unqualified-object-type
        - qualified-object-type

  unqualified-object-type:
    - match: '{{id}}'
      scope: storage.type.class.yaral
      push:
        - unqualiefied-object-type-end
        - maybe-type-argument

  unqualiefied-object-type-end:
    - match: (?={{single_dot}})
      fail: object-type
    - include: else-pop3

  qualified-object-type:
    - meta_include_prototype: false
    - meta_scope: meta.path.yaral
    - match: ''
      branch_point: qualified-object-type
      branch:
        - qualified-object-type-package
        - qualified-object-type-class

  qualified-object-type-package:
    - match: '{{lowercase_id}}'
      scope: variable.namespace.yaral
      set: qualified-object-type-accessor
    - include: annotations
    - match: (?=\S)
      fail: qualified-object-type

  qualified-object-type-accessor:
    - include: punctuation-accessor-dot-pop
    - match: (?=\S)
      fail: qualified-object-type

  qualified-object-type-class:
    - match: '{{identifier}}'
      scope: storage.type.class.yaral
      push:
        - qualified-object-type-end
        - qualified-object-type-arguments
    - include: annotation-else-pop3

  qualified-object-type-arguments:
    - match: (?=\s*<)
      set: maybe-type-argument
    - match: (?=\s*\S)
      pop: 1

  qualified-object-type-end:
    - match: \s*({{single_dot}})
      captures:
        1: punctuation.accessor.dot.yaral
      pop: 1
    - match: (?=\s*\S)
      pop: 4

###[ REFERENCE TYPE ]##########################################################

  maybe-additional-bounds:
    - include: additional-bounds
    - include: else-pop

  additional-bounds:
    - match: '&'
      scope: keyword.operator.logical.yaral
      push: maybe-reference-type

  maybe-reference-type:
    - include: reference-type
    - include: annotation-else-pop

  reference-type:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-4.html#jls-4.3
    - match: (?={{storage_types}}{{break}})
      branch_point: primitive-array-type
      branch:
        - reference-type-array
        - reference-type-illegal
    - match: (?={{id_first_char}})
      set:
        - maybe-array-modifiers
        - maybe-object-type

  reference-type-array:
    # note: simplified pattern as primitive types consist of ascii chars only
    - match: '[A-Za-z]+'
      scope: storage.type.primitive.yaral
      set: reference-type-array-item-access

  reference-type-array-item-access:
    - match: (?=\[)
      pop: 1
      set: maybe-array-modifiers
    - include: annotations
    - match: (?=\S)
      fail: primitive-array-type

  reference-type-illegal:
    # note: simplified pattern as primitive types consist of ascii chars only
    - match: '[A-Za-z]+'
      scope: invalid.illegal.unexpected-keyword.yaral
      pop: 2

###[ INHERRITED TYPE REFERENCES ]##############################################

  # Used in class-level 'extends' and 'implements'
  inherited-object-type-list:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.1.4
    - match: ','
      scope: punctuation.separator.comma.yaral
      push: inherited-object-type

  inherited-object-type:
    - match: (?={{identifier}})
      branch_point: inherited-object-type
      branch:
        - unqualified-inherited-object-type
        - qualified-inherited-object-type
    - include: annotation-else-pop

  unqualified-inherited-object-type:
    - match: '{{id}}'
      scope: entity.other.inherited-class.yaral
      push:
        - unqualiefied-inherited-object-type-end
        - maybe-type-argument

  unqualiefied-inherited-object-type-end:
    - match: (?={{single_dot}})
      fail: inherited-object-type
    - include: illegal-array-modifiers
    - include: annotation-else-pop3

  qualified-inherited-object-type:
    - meta_include_prototype: false
    - meta_scope: meta.path.yaral
    - match: ''
      branch_point: qualified-inherited-object-type
      branch:
        - qualified-inherited-object-type-package
        - qualified-inherited-object-type-class

  qualified-inherited-object-type-package:
    - match: '{{lowercase_id}}'
      scope: variable.namespace.yaral
      set: qualified-inherited-object-type-accessor
    - include: annotations
    - match: (?=\S)
      fail: qualified-inherited-object-type

  qualified-inherited-object-type-accessor:
    - include: punctuation-accessor-dot-pop
    - match: (?=\S)
      fail: qualified-inherited-object-type

  qualified-inherited-object-type-class:
    - match: '{{identifier}}'
      scope: entity.other.inherited-class.yaral
      push:
        - qualified-object-type-end
        - qualified-object-type-arguments
    - include: annotation-else-pop3

###[ TYPE ARGUMENTS ]##########################################################

  maybe-type-argument:
    - include: type-argument
    - include: else-pop

  type-argument:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-4.html#jls-4.5.1
    - match: <>
      scope:
        meta.generic.yaral
        punctuation.definition.generic.diamond.yaral
      pop: 1
    - match: <
      scope: punctuation.definition.generic.begin.yaral
      set:
        - type-argument-body
        - type-argument-reference

  type-argument-body:
    - meta_scope: meta.generic.yaral
    - match: ','
      scope: punctuation.separator.comma.yaral
      push: type-argument-reference
    - include: type-parameter-end

  type-argument-reference:
    - match: \?
      scope: variable.language.wildcard.yaral
      set: type-argument-bounds
    - include: maybe-reference-type

  type-argument-bounds:
    - match: extends{{break}}
      scope: storage.modifier.extends.yaral
      set:
        - maybe-additional-bounds
        - maybe-reference-type
    - match: super{{break}}
      scope: keyword.declaration.super.yaral
      set: maybe-reference-type
    - include: else-pop

###[ TYPE PARAMETERS ]#########################################################

  maybe-type-parameter:
    - include: type-parameter
    - include: else-pop

  type-parameters:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.1.2
    - match: <
      scope: punctuation.definition.generic.begin.yaral
      push:
        - type-parameter-body
        - type-parameter-bounds
        - type-parameter-reference

  type-parameter:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.1.2
    - match: <
      scope: punctuation.definition.generic.begin.yaral
      set:
        - type-parameter-body
        - type-parameter-bounds
        - type-parameter-reference

  type-parameter-body:
    - meta_scope: meta.generic.declaration.yaral
    - match: ','
      scope: punctuation.separator.comma.yaral
      push:
        - type-parameter-bounds
        - type-parameter-reference
    - include: type-parameter-end

  type-parameter-reference:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-4.html#jls-4.4
    - match: '{{identifier}}'
      scope: markup.raw.inline.yaral
      pop: 1
    - match: \?|{{storage_types}}{{break}}
      scope: invalid.illegal.unexpected-keyword.yaral
      pop: 1
    - include: annotation-else-pop

  type-parameter-bounds:
    - match: extends{{break}}
      scope: storage.modifier.extends.yaral
      set:
        - maybe-additional-bounds
        - maybe-reference-type
    - match: super{{break}}
      scope: invalid.illegal.unexpected-keyword.yaral
      set: maybe-reference-type
    - include: else-pop

  type-parameter-end:
    - match: '>'
      scope: punctuation.definition.generic.end.yaral
      pop: 1
    - match: extends{{break}}
      scope: invalid.illegal.unexpected-keyword.yaral
      push:
        - maybe-additional-bounds
        - maybe-reference-type
    - match: super{{break}}
      scope: invalid.illegal.unexpected-keyword.yaral
      push: maybe-reference-type
    - include: annotation-else-pop

###[ PRIMITIVE TYPES ]#########################################################

  primitive-types:
    - match: '{{storage_types}}{{break}}'
      scope: storage.type.primitive.yaral
      push: maybe-array-modifiers

  primitive-type:
    - match: '{{storage_types}}{{break}}'
      scope: storage.type.primitive.yaral
      pop: 1

  var-types:
    - match: var{{break}}
      scope: storage.type.variant.yaral
      push: maybe-illegal-array-modifiers

  var-type:
    - match: var{{break}}
      scope: storage.type.variant.yaral
      set: maybe-illegal-array-modifiers

  maybe-array-modifiers:
    - include: array-modifiers
    - include: annotation-else-pop

  maybe-only-array-modifiers:
    - include: array-modifiers
    - include: annotations
    - include: illegal-members
    - include: else-pop

  array-modifiers:
    - match: \[\s*\]
      scope: storage.modifier.array.yaral

  final-modifiers:
    - match: final{{break}}
      scope: storage.modifier.yaral

  storage-modifiers:
    - match: '{{storage_modifiers}}{{break}}'
      scope: storage.modifier.yaral

###[ PROTOTYPES ]##############################################################

  prototype:
    - include: comments
    - include: illegal-keywords

  annotation-else-pop:
    - include: annotations
    - include: else-pop

  annotation-else-pop2:
    - include: annotations
    - include: else-pop2

  annotation-else-pop3:
    - include: annotations
    - include: else-pop3

  else-pop:
    - match: (?=\S)
      pop: 1

  else-pop2:
    - match: (?=\S)
      pop: 2

  else-pop3:
    - match: (?=\S)
      pop: 3

  immediately-pop:
    - match: ''
      pop: 1

  immediately-pop2:
    - match: ''
      pop: 2

  immediately-pop3:
    - match: ''
      pop: 3

###[ ILLEGALS ]################################################################

  maybe-illegal-array-modifiers:
    - include: illegal-array-modifiers
    - include: annotation-else-pop

  illegal-array-modifiers:
    - match: \[\s*\]
      scope: invalid.illegal.unexpected-modifier.yaral

  illegal-keywords:
    - match: '{{illegal_keywords}}{{break}}'
      scope: invalid.illegal.keyword.yaral

  illegal-unexpected-keywords:
    - match: '{{keywords}}{{break}}'
      scope: invalid.illegal.unexpected-keyword.yaral

  illegal-unexpected-reserved:
    - match: '{{reserved_words}}'
      scope: invalid.illegal.unexpected-keyword.yaral
      pop: 1

  illegal-members:
    - match: '{{single_dot}}'
      scope: invalid.illegal.unexpected-accessor.yaral
      push:
        - maybe-illegal-array-modifiers
        - maybe-illegal-member

  maybe-illegal-member:
    - match: '{{id}}'
      scope: invalid.illegal.unexpected-member.yaral
      pop: 1
    - include: else-pop

  illegal-newline:
    - match: \n
      scope: invalid.illegal.unexpected-newline.yaral
      pop: 1

  illegal-storage-modifiers:
    - match: '{{storage_modifiers}}{{break}}'
      scope: invalid.illegal.unexpected-keyword.yaral

  maybe-illegal-type-parameter:
    - match: \<
      set: illegal-type-parameter-body
    - include: else-pop

  illegal-type-parameter-body:
        - meta_scope: invalid.illegal.unexpected-type-parameters.yaral
        - match: \<
          push:
            - match: \>
              pop: 1
        - match: \>
          pop: 1

  illegal-var-type:
    - match: var{{break}}
      scope: invalid.illegal.unexpected-keyword.yaral
      pop: 1

  stray-braces:
    - match: \}
      scope: invalid.illegal.stray.yaral

  stray-group:
    - match: \)
      scope: invalid.illegal.stray.yaral